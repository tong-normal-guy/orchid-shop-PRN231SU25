---
description: "OrchidsShop ASP.NET patterns: UnitOfWork + Repository + AutoMapper + Reflection + API structure"
alwaysApply: false
---
# OrchidsShop Coding Standards

- When try to run project, run project in OrchidsShop.API for backend and OrchidsShop.PresentationLayer for frontend razor page.

## ‚úÖ UnitOfWork & Repository
- Always use `_unitOfWork.Repository<T>()` to get a repository.
- Repository must support Add, Update, Delete, GetAll, GetById, Find, Where, FirstOrDefault and pagination as GetWithCount.

## üß† AutoMapper
- Use `Commons.MapperHelper` in `OrchidsShop.BLL` to map between DTOs and Entities.
- Always configure in MapperHelper and call `mapper.Map(dto, entity)` or vice versa.

## üîÑ Reflection for Updates
- Use `ReflectionHelper.UpdateProperties(dto, entity, ignoreNulls: true)` before `repository.Update(...)`.

## üß© BLL (OrchidsShop.BLL)
- Methods must have **English XML comments**.
- Read methods return `Task<List<TDto>>`, write methods return `Task<OperationResult<bool>>`.

Example:
csharp
/// <summary>
/// Updates product information.
/// </summary>
/// <param name="dto">Product DTO with updated data.</param>
/// <returns>OperationResult<bool> indicating success.</returns>
public async Task<OperationResult<bool>> UpdateProductAsync(ProductDto dto);


## ‚òéÔ∏è API Controllers (GET)
- Only Orchid and Orchid Category(or category) is using separated endpoint and controller, other will use controller only for read and write.
- Only use GET.
- Vietnamese documentation.
- Always return List<TDto> even for single-item fetch.

Example:

csharp
Copy
Edit
[HttpGet]
[SwaggerOperation(
    Summary = "L·∫•y danh s√°ch c√°c danh m·ª•c hoa lan",
    Description = "Truy xu·∫•t danh s√°ch c√°c danh m·ª•c hoa lan d·ª±a tr√™n c√°c tham s·ªë truy v·∫•n ƒë∆∞·ª£c cung c·∫•p. " +
                "H·ªó tr·ª£ ph√¢n trang, l·ªçc v√† s·∫Øp x·∫øp. " +
                "D√πng chung cho l·∫•y chi ti·∫øt danh m·ª•c theo ID, theo t√™n, t√¨m ki·∫øm, l·ªçc theo ID v√† t·∫•t c·∫£ c√°c thao t√°c truy v·∫•n kh√°c.",
    OperationId = "GetOrchidCategories",
    Tags = new[] { "Orchid Categories" }
    )]
public async Task<IActionResult> GetOrchidCategories([FromQuery] QueryCategoryRequest request)

üîß API Endpoints (POST/PUT/DELETE)
Use appropriate HTTP verbs (POST, PUT, DELETE).

Vietnamese documentation.

Return OperationResult<bool> wrapped in IActionResult.

Example:

csharp
Copy
Edit
/// <summary>
/// C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m.
/// </summary>
/// <param name="model">Th√¥ng tin m·ªõi c·ªßa s·∫£n ph·∫©m.</param>
/// <returns>true n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i.</returns>
[HttpPut]
public async Task<IActionResult> UpdateProduct([FromBody] ProductUpdateModel model);
